<div .comment :is_unapproved:.unapproved :is_top_level:.top_level :is_even_depth:.even_depth :is_odd_depth:.odd_depth>
  <div .comment-head>
    <div .comment-head-item>
      $maybe author_avatar <- userAvatar user
        <a href="@{UserR user_id}">
          <img .small_avatar src="#{author_avatar}"> #
      <a href="@{UserR user_id}">
        #{userDisplayName (Entity user_id user)}

    $if can_establish
      <div .comment-head-item>
        <a href="@{UserR user_id}">
          (establish user)

    <div .comment-head-item .comment-date>
      ^{renderTime (fromMaybe (commentCreatedTs comment) (commentApprovedTs comment))}
    <div .comment-head-item :is_preview:.preview>
      |
    <div .comment-head-item :is_preview:.preview>
      <a href="@{comment_route_permalink comment_id}">
        permalink
    $maybe parent_id <- commentParent comment
      <div .comment-head-item :is_preview:.preview>
        |
      <div .comment-head-item :is_preview:.preview>
        <a href="@{comment_route_permalink parent_id}">
          parent
    $if is_private
      <i style="color: brown">private comment


    $if can_watch
      <div .comment-head-item :is_preview:.preview>
        |
      <div .comment-action :is_preview:.preview>
        <a href="@{comment_route_watch comment_id}">
          watch

    $if can_unwatch
      <div .comment-head-item :is_preview:.preview>
        |
      <div .comment-action :is_preview:.preview>
        <a href="@{comment_route_unwatch comment_id}">
          unwatch


  $maybe PersistInt64 ticket_id <- fmap (toPersistValue . entityKey) mticket
    <span .glyphicon .glyphicon-tag>
    <span .ticket-num>SD-#{show ticket_id}

    $if can_claim && not is_closed
      <div :is_preview:.preview .comment-action>
        <a href="@{comment_route_claim comment_id}">
          claim

    $else
      $maybe claim <- mclaim
        $with claiming_user_id <- ticketClaimingUser claim
          $maybe claiming_user <- M.lookup claiming_user_id user_map
            <span .claimed-by>
              claimed
              ^{renderTime (ticketClaimingTs claim)}
              by
              <a href="@{UserR claiming_user_id}">#{userDisplayName $ Entity claiming_user_id claiming_user}#
              $maybe note <- ticketClaimingNote claim
                : #{note}

            $if can_unclaim && not is_closed
              <div :is_preview:.preview .comment-action>
                <a href="@{comment_route_unclaim comment_id}">
                  (unclaim)

  $if is_unapproved
    <div .awaiting-approval>
      <span .glyphicon .glyphicon-arrow-right>
      awaiting moderator approval

      $if can_approve
        <a href="@{comment_route_approve comment_id}">
          \ (approve)

  $forall closure <- earlier_closures
    <div .closed>
      A comment above was closed at ^{renderTime (commentClosingTs closure)}
      #{commentClosingReason closure}

  $forall retract <- earlier_retracts
    <div .retracted>
      A comment above was retracted ^{renderTime (commentRetractingTs retract)}
      #{commentRetractingReason retract}

  $maybe closure <- mclosure
    <div .closed>
      $if commentClosingClosedBy closure == user_id
        The author
      $else
        ^{userNameWidget $ commentClosingClosedBy closure}
      \ closed this comment ^{renderTime (commentClosingTs closure)}
      #{commentClosingReason closure}

  $maybe retract <- mretract
    <div .retracted>
      The author retracted this comment ^{renderTime (commentRetractingTs retract)}
      #{commentRetractingReason retract}


  $maybe (flagging, flag_reasons) <- mflag
    <div .flagged>
      A user flagged this comment as a violation of the
      <a href="@{WikiR "snowdrift" LangEn "conduct"}">
        Code of Conduct
      due to:
      <div .flag-reasons>#{T.intercalate ", " $ map descFlagReason flag_reasons}
      $maybe flag_markdown <- commentFlaggingMessage flagging
        <div .flag-markdown>
          Additional comments:
          #{flag_markdown}
      <i>Please edit to address these concerns and repost.

  <div .comment-body>
    ^{markdownWidgetWith commentTextTransform (commentText comment)}

  <div>
    $forall tag <- tags
      ^{tagWidget tag}

  <div :is_preview:.preview .comment-actions>
    $if can_edit
      <div .comment-action>
        <a href="@{comment_route_edit comment_id}">
          edit

    $if can_close
      <div .comment-action>
        <a href="@{comment_route_close comment_id}">
          close

    $if can_retract
      <div .comment-action>
        <a href="@{comment_route_retract comment_id}">
          retract

    $if can_delete
      <div .comment-action>
        <a href="@{comment_route_delete comment_id}">
          delete

    $if can_flag
      <div .comment-action>
        <a href="@{comment_route_flag comment_id}">
          flag

    $if can_add_tag
      <div .comment-action>
        <a href="@{comment_route_add_tag comment_id}">
          tag

    $if can_rethread
      <div .comment-action>
        <a href="@{comment_route_rethread comment_id}">
          rethread

    $if can_reply
      <div .comment-action>
        <a href="@{comment_route_reply comment_id}">
          reply

  <div .inner-widget>
    ^{inner_widget}
